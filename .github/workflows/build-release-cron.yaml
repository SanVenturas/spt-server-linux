build-server:
  needs: prepare
  if: needs.prepare.outputs.proceed == 'true'
  runs-on: ubuntu-latest
  container:
    image: refringe/spt-build-node:1.0.9
  outputs:
    server_commit: ${{ steps.clone-server.outputs.server_commit }}
  steps:
    - name: Clone Server
      id: clone-server
      shell: bash
      run: |
        rm -rf /workspace/SPT/Build/server
        if [[ "${{ needs.prepare.outputs.is_nightly }}" == "true" ]]; then
          BRANCH=${{ needs.prepare.outputs.branch_server }}
          echo "Cloning branch $BRANCH"
          git clone https://github.com/sp-tarkov/server.git --branch "$BRANCH" --depth 1 /workspace/SPT/Build/server
        else
          TAG=${{ needs.prepare.outputs.target_tag }}
          echo "Cloning tag $TAG"
          git clone https://github.com/sp-tarkov/server.git --branch "$TAG" --depth 1 /workspace/SPT/Build/server
        fi

        cd /workspace/SPT/Build/server
        echo "server_commit=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

    - name: Pull LFS Files
      shell: bash
      run: |
        cd /workspace/SPT/Build/server
        git lfs install --local
        git lfs pull

    - name: Install Dependencies
      shell: bash
      run: |
        cd /workspace/SPT/Build/server/project
        npm install

    - name: Build Server
      shell: bash
      run: |
        cd /workspace/SPT/Build/server/project
        BUILD_TYPE="${{ needs.prepare.outputs.build_type }}"
        echo "Running build for $BUILD_TYPE"
        npm run build:$BUILD_TYPE -- --arch=arm64 --platform=linux
        printf "\nBuilt!\n\n"

    - name: Upload Server Artifact
      uses: actions/upload-artifact@v4
      with:
        name: server-artifact
        path: /workspace/SPT/Build/server/project/build/
        retention-days: 1
        if-no-files-found: error

build-modules:
  needs: prepare
  if: needs.prepare.outputs.proceed == 'true'
  runs-on: ubuntu-latest
  container:
    image: refringe/spt-build-dotnet:1.0.0
  steps:
    - name: Clone Modules
      id: clone-modules
      shell: bash
      run: |
        rm -rf /workspace/SPT/Build/modules
        if [[ "${{ needs.prepare.outputs.is_nightly }}" == "true" ]]; then
          BRANCH=${{ needs.prepare.outputs.branch_modules }}
          echo "Cloning modules from branch $BRANCH"
          git clone https://github.com/sp-tarkov/modules.git --branch "$BRANCH" --depth 1 /workspace/SPT/Build/modules
        else
          TAG=${{ needs.prepare.outputs.target_tag }}
          echo "Cloning modules from tag $TAG"
          git clone https://github.com/sp-tarkov/modules.git --branch "$TAG" --depth 1 /workspace/SPT/Build/modules
        fi

        cd /workspace/SPT/Build/modules
        echo "modules_commit=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

    - name: Download Client Module Package
      shell: bash
      env:
        MODULE_DOMAIN: ${{ secrets.MODULE_DOMAIN }}
      run: |
        DIR_MANAGED="/workspace/SPT/Build/modules/project/Shared/Managed"
        DOWNLOAD_PATH="$DIR_MANAGED/${{ needs.prepare.outputs.client_version }}.7z"
        DOWNLOAD_URL="${MODULE_DOMAIN}/${{ needs.prepare.outputs.client_version }}.7z"
        echo "Downloading Client Module Package from $DOWNLOAD_URL to $DOWNLOAD_PATH"
        mkdir -p "$DIR_MANAGED"
        wget -q -O "$DOWNLOAD_PATH" "$DOWNLOAD_URL" || {
          echo "Failed to download the module package."
          exit 1
        }
        if [ ! -s "$DOWNLOAD_PATH" ]; then
          echo "The module package does not exist or is empty."
          exit 1
        fi
        echo "Download Successful: $DOWNLOAD_PATH"

    - name: Decompress Client Module Package
      shell: bash
      run: |
        cd /workspace/SPT/Build/modules/project/Shared/Managed
        7z x ${{ needs.prepare.outputs.client_version }}.7z -aoa
        echo "Client module package decompressed."

    - name: Delete Client Module Package
      shell: bash
      run: |
        cd /workspace/SPT/Build/modules/project/Shared/Managed
        rm -f ${{ needs.prepare.outputs.client_version }}.7z
        echo "Client module package deleted."

    - name: Build Modules
      shell: bash
      run: |
        cd /workspace/SPT/Build/modules/project
        dotnet build -c Release -p:Version=${{ needs.prepare.outputs.spt_version }} -r linux-arm64
        printf "\nBuilt!\n\n"

    - name: Upload Modules Artifact
      uses: actions/upload-artifact@v4
      with:
        name: modules-artifact
        path: /workspace/SPT/Build/modules/project/Build
        retention-days: 1
        if-no-files-found: error
