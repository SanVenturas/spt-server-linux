name: SPT-Server Build Release

on:
  schedule:
    - cron: '0 2 * * *'
  push:
    paths:
      - '.github/workflows/build-release-cron.yaml'

env:
  SERVER_URL: https://github.com
  REPOSITORY_SPT_SERVER: sp-tarkov/server
  RELEASE_BRANCH: master

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      PROCEED: ${{ steps.compare-tags.outputs.PROCEED }}
      BUILT_TAG: ${{ steps.compare-tags.outputs.BUILT_TAG }}
      TARGET_TAG: ${{ steps.compare-tags.outputs.TARGET_TAG }}

      SPT_VERSION: ${{ steps.versions.outputs.SPT_VERSION }}
      EFT_VERSION: ${{ steps.versions.outputs.EFT_VERSION }}
      BUILD_DATE: ${{ steps.versions.outputs.DATE }}
      BUILD_DATE_TIME: ${{ steps.versions.outputs.DATE_TIME }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get Latest Tag From SPT
        id: get-latest-tag
        run: |
          git clone -b ${{ env.RELEASE_BRANCH }} ${{ env.SERVER_URL }}/${{ env.REPOSITORY_SPT_SERVER }}.git Server
          cd Server
          SPT_SERVER_LATEST_TAG=$(git describe --tags --abbrev=0)
          echo "SPT_SERVER_LATEST_TAG=$SPT_SERVER_LATEST_TAG" >> $GITHUB_OUTPUT
        shell: bash

      - name: Compare Tags
        id: compare-tags
        run: |
          server_last_built_tag=$(cat trigger.release | grep 'server=' | cut -d'=' -f2)
          server_latest_tag=${{ steps.get-latest-tag.outputs.SPT_SERVER_LATEST_TAG }}
          if [ "$server_last_built_tag" != "$server_latest_tag" ]; then
            echo "BUILT_TAG=$server_last_built_tag" >> $GITHUB_OUTPUT
            echo "TARGET_TAG=$server_latest_tag" >> $GITHUB_OUTPUT
            echo "PROCEED=true" >> $GITHUB_OUTPUT
          else
            echo "PROCEED=false" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Extract versions
        id: versions
        if: steps.compare-tags.outputs.PROCEED == 'true'
        run: |
          cd Server
          SERVER_TAG=${{ steps.get-latest-tag.outputs.SPT_SERVER_LATEST_TAG }}
          git checkout $SERVER_TAG
          SPT_VERSION=$(jq -r '.sptVersion' project/assets/configs/core.json)
          EFT_VERSION=$(jq -r '.compatibleTarkovVersion' project/assets/configs/core.json)

          echo "SPT_VERSION=$SPT_VERSION" >> $GITHUB_OUTPUT
          echo "EFT_VERSION=$EFT_VERSION" >> $GITHUB_OUTPUT

          echo "DATE=$(date +%Y%m%d)" >> $GITHUB_OUTPUT
          echo "DATE_TIME=$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT
        shell: bash

  build-server-linux:
    needs: prepare
    if: ${{ needs.prepare.outputs.PROCEED == 'true' }}
    runs-on: ubuntu-latest
    env:
      OUTPUT_DIR: spt-server
      SOURCECODE_DIR: ${{ github.workspace }}/code

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: false

      - name: Clone Linux Server Code
        run: |
          git clone -b ${{ env.RELEASE_BRANCH }} ${{ env.SERVER_URL }}/${{ env.REPOSITORY_SPT_SERVER }}.git ${{ env.SOURCECODE_DIR }}
        shell: bash

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20.11.1

      - name: Install NPM Dependencies
        run: |
          cd ${{ env.SOURCECODE_DIR }}/project
          npm install
        shell: bash

      - name: Build Linux Server
        run: |
          cd ${{ env.SOURCECODE_DIR }}/project
          npm run build:release
          mv build ${{ env.OUTPUT_DIR }}
        shell: bash

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.OUTPUT_DIR }}
          path: ${{ env.SOURCECODE_DIR }}/project/${{ env.OUTPUT_DIR }}
          overwrite: true

  assemble-and-publish:
    needs: [prepare, build-server-linux]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Push Code To GitHub
        run: |
          git pull
          echo "server=${{ needs.prepare.outputs.TARGET_TAG }}" > trigger.release
          git add trigger.release
          git commit -m "Update trigger.release"
          git push
        shell: bash

      - name: Download Linux Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build-server-linux.outputs.LINUX_ARTIFACT }}
          path: linux

      - name: Compress and Publish
        run: |
          cd linux
          zip -r ../release.zip *
          ls -R ..
        shell: bash

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ needs.prepare.outputs.TARGET_TAG }}
          tag_name: ${{ needs.prepare.outputs.TARGET_TAG }}
          files: |
            release.zip
