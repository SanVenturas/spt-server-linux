name: SPT-Server Linux Build and Docker Image

on:
  schedule:
    - cron: '0 2 * * *'  # 每天凌晨 2 点触发构建
  push:
    paths:
      - '.github/workflows/build-linux-docker.yaml'

env:
  SERVER_URL: https://github.com
  REPOSITORY_SPT_SERVER: sp-tarkov/server
  REPOSITORY_SPT_SERVER_AIRRYCO: AirryCo/spt-server
  RELEASE_BRANCH: master

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      PROCEED: ${{ steps.compare-tags.outputs.PROCEED }}
      TARGET_TAG: ${{ steps.compare-tags.outputs.TARGET_TAG }}
      SPT_VERSION: ${{ steps.versions.outputs.SPT_VERSION }}
      EFT_VERSION: ${{ steps.versions.outputs.EFT_VERSION }}
      SPT_SERVER_COMMIT: ${{ steps.versions.outputs.SPT_SERVER_COMMIT }}
      BUILD_DATE_TIME: ${{ steps.versions.outputs.DATE_TIME }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get Latest Tag From SPT
        id: get-latest-tag
        run: |
          git clone -b ${{ env.RELEASE_BRANCH }} ${{ env.SERVER_URL }}/${{ env.REPOSITORY_SPT_SERVER }}.git Server
          cd Server
          SPT_SERVER_LATEST_TAG=$(git describe --tags --abbrev=0)
          echo "SPT_SERVER_LATEST_TAG=$SPT_SERVER_LATEST_TAG" >> $GITHUB_OUTPUT
        shell: bash

      - name: Compare Tags
        id: compare-tags
        run: |
          source trigger.release
          server_last_built_tag=$server
          server_latest_tag=${{ steps.get-latest-tag.outputs.SPT_SERVER_LATEST_TAG }}
          if [ "$server_last_built_tag" != "$server_latest_tag" ]; then
            echo "PROCEED=true" >> $GITHUB_OUTPUT
            echo "TARGET_TAG=$server_latest_tag" >> $GITHUB_OUTPUT
          else
            echo "PROCEED=false" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Extract versions
        id: versions
        if: steps.compare-tags.outputs.PROCEED == 'true'
        run: |
          cd Server
          SERVER_TAG=${{ steps.get-latest-tag.outputs.SPT_SERVER_LATEST_TAG }}
          git checkout $SERVER_TAG
          SPT_SERVER_COMMIT=$(git rev-parse --short $SERVER_TAG)

          cp -v project/assets/configs/core.json .
          SPT_VERSION=$(jq -r '.sptVersion' core.json)
          EFT_VERSION=$(jq -r '.compatibleTarkovVersion' core.json)

          echo "SPT_VERSION=$SPT_VERSION" >> $GITHUB_OUTPUT
          echo "EFT_VERSION=$EFT_VERSION" >> $GITHUB_OUTPUT
          echo "SPT_SERVER_COMMIT=$SPT_SERVER_COMMIT" >> $GITHUB_OUTPUT
          echo "DATE_TIME=$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT
        shell: bash

  build-server-linux:
    needs: prepare
    if: ${{ needs.prepare.outputs.PROCEED == 'true' }}
    runs-on: ubuntu-latest
    env:
      OUTPUT_DIR: spt-server
      SOURCECODE_DIR: ${{ github.workspace }}/code

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Clone AirryCo's Linux Server Code
        run: |
          git clone -b ${{ env.RELEASE_BRANCH }} ${{ env.SERVER_URL }}/${{ env.REPOSITORY_SPT_SERVER_AIRRYCO }} ${{ env.SOURCECODE_DIR }}
          cd ${{ env.SOURCECODE_DIR }}
          git lfs pull
        shell: bash

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20.11.1

      - name: Merge Server Code From SPT
        run: |
          cd ${{ env.SOURCECODE_DIR }}
          git pull
          git fetch -u ${{ env.SERVER_URL }}/${{ env.REPOSITORY_SPT_SERVER }}.git ${{ env.RELEASE_BRANCH }}:SPT-${{ env.RELEASE_BRANCH }}
          git merge -m "Merge tag ${{ needs.prepare.outputs.TARGET_TAG }} from SPT" --no-ff ${{ needs.prepare.outputs.TARGET_TAG }}
        shell: bash

      - name: Install NPM Dependencies
        run: |
          cd ${{ env.SOURCECODE_DIR }}/project
          npm install
        shell: bash

      - name: Build Linux Server
        run: |
          cd ${{ env.SOURCECODE_DIR }}/project
          npm run build:release
          mv build ${{ env.OUTPUT_DIR }}
        shell: bash

      - name: Upload Linux Artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-server-artifact
          path: ${{ env.SOURCECODE_DIR }}/project/${{ env.OUTPUT_DIR }}

  build-docker-image:
    needs: [prepare, build-server-linux]
    runs-on: ubuntu-latest
    env:
      DOCKERHUB_USER: stblog
      DOCKERHUB_REPOSITORY: spt-server
      GHCR_USER: airryco
      GHCR_REPOSITORY: spt-server

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ env.GHCR_USER }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6
        with:
          context: ./docker
          push: true
          tags: |
            ${{ env.DOCKERHUB_USER }}/${{ env.DOCKERHUB_REPOSITORY }}:${{ needs.prepare.outputs.TARGET_TAG }}
            ghcr.io/${{ env.GHCR_USER }}/${{ env.GHCR_REPOSITORY }}:${{ needs.prepare.outputs.TARGET_TAG }}
          labels: |
            org.opencontainers.image.source=https://github.com/AirryCo/spt-server
            org.opencontainers.image.revision=${{ needs.prepare.outputs.SPT_SERVER_COMMIT }}
          platforms: linux/arm64

  notify:
    needs: [prepare, build-server-linux, build-docker-image]
    runs-on: ubuntu-latest
    steps:
      - name: Notify Discord
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          curl -H "Content-Type: application/json" -X POST -d '{
            "content": "New SPT-Server Linux build and Docker image available!",
            "embeds": [{
              "title": "Build Information",
              "description": "A new build has been published.",
              "color": 5763719,
              "fields": [
                {"name": "SPT Version", "value": "'"${{ needs.prepare.outputs.SPT_VERSION }}"'"},
                {"name": "EFT Version", "value": "'"${{ needs.prepare.outputs.EFT_VERSION }}"'"},
                {"name": "Commit", "value": "'"${{ needs.prepare.outputs.SPT_SERVER_COMMIT }}"'"},
                {"name": "Build Time", "value": "'"${{ needs.prepare.outputs.BUILD_DATE_TIME }}"'"}
              ]
            }]
          }' $DISCORD_WEBHOOK_URL
